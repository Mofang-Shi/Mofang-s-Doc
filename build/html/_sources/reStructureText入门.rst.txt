.. 

####################################
reStructureText语法入门
####################################

最后编辑时间：2023.12.07

段落
====================

1、两行间没有空行，
则会显示为一行。

2、两行间没有空行但是缩进， 
    会显示为多行，
        并且除最后一行外会加粗。

3、正常缩进显示：

    缩进一次

        缩进两次

4、行首使用管道符 ``|`` 来创建保留换行的段落。比如：

| 虽然没有空行，
| 但仍然换行了。
| 而且它们在同一个段落中。

文本标记
====================

| 这是 ``字面量`` ，使用 ``````
| 这是 *斜体* ，使用 ``*``
| 这是 **强调** ，使用 ``**``
| **注意标记文本与正文文本之间用一个空格隔开！**
| **如果不想显示该空格，使用“\\”加空格组合！**

标题参考
====================

:title:`不存在的章节` [不存在的书籍]_

.. [不存在的书籍] 《冇书》

| 连接到某个标题，则在出现该标题的后面加一个 ``_`` ，并用空格隔开。
| 例如，这一行的\ reStructureText入门_\ 会指向最上面的标题.

解释性文本角色
====================
 
即一对单反引号所包括的文本角色。它默认指\ 标题参考_， 
但可以用一个 default-role 指令更改它在接下来的文本处理中的行为:

::

    1、让单引号表示数学公式： 
    .. default-role:: math 

    2、让单引号表示字面量： 
    .. default-role:: literal

代码高亮
====================

通过 role 指令创建新的代码角色以启用高亮。
::

    .. role:: code-py(code)
        :language: python
    
    :code-py:`你的py代码`

.. role:: code-py(code)
    :language: python

比如，这是一行 Python 代码： :code-py:`print(f"{8}")`

数学公式
====================

使用\ ``:math:``\ 加你想要创建的公式，为LaTex语法。
::

   :math:`你的公式`

比如，这是一个数学公式：\ :math:`\lim_{x \to \infty} x^2_{22} - 
\int_{1}^{5}x\mathrm{d}x + \sum_{n=1}^{20} n^{2} = 
\prod_{j=1}^{3} y_{j}  + \lim_{x \to -2} \frac{x-2}{x}`

公式太长可以分行写，LaTex语法参考 https://zhuanlan.zhihu.com/p/110756681

上下标
===========

上标是\ `superscript`\ ，别名\ ``sup``，下标是\ `subscript`，\ 别名\ ``sub``。
::

    上标：
    :sup:`显示的上标`
    下标：
    :sub:`显示的下标`

比如，美食清单：\ :sup:`火锅`\ \ :sub:`小面`\ \ :sup:`串串`\ \ :sub:`鸡公煲`\ \ :sup:`豆干`\ \ :sub:`菠萝蜜`\ ，也可以使用LaTex通过math方法实现。

编号
===========

| 无序列表用 ``*``, ``-``, ``+`` 做符号。
| 有序列表可以用数字（123……）、字母（abc……）、罗马数字（i,ii,iii……） **与** 点（ ``.`` ）、右英文括号（ ``)`` ）或用英文括号完全包围表示。


::

    *   无序 

    1.  有序 

    a)  有序 

| 请注意：
| 1、无序列表的项目符号可以混用，只需要保持缩进即可。
| 2、有序列表的项目符号不可混用，并且需要保持编号连续且单调。 但可以使用 # 符号来进行编号的自动推导。

超链接
===========

| 1、一个超链接需要有两个部分：引用和靶标（即被引用的对象）。
| 2、引用部分需要在名称后加下划线：\ ``引用对象_``。
| 3、如果名称中包含了空格，则需要用反引号包括起来：\ ```引用 对象`_``。
| 4、被引用的对象在前面使用下划线，按如下方法定义：

::

    .. _AI网: https://ai.com

    上式将定义一个名为“AI网”的引用，指向一个外部网站。

.. _AI网: https://ai.com

比如，AI网_\ 是一个指向外部的超链接。

| 5、如果只引用一次，引用和被引用的对象也可以写在同一处：

::

    `名称 <网站>`_

| 6、任何满足URL形式的文本会被识别为超链接。

标题
==========

| 1、标题是划分章节的依据。将单行文本缀以下划符号则构成标题。
| 2、可用的符号有 :literal:`#=-~:'"^_*+<>`，以及反引号。
| 3、需要满足长度条件：下划符号的数目大于标题文本数量。
| 4、章节的大小关系与符号无关，只与符号出现的顺序有关。一般来讲，习惯用 `#` 做一级标题，`=`, `-` 分别做 二、三 级标题。
| 5、可以使用双划线，例如：

::

    ##########
    双划线风格
    ##########

| 6、标题本身是一个可以被引用的对象，可以使用\ 超链接_\ 的方式来指向本文的一个章节。

分割线
==========

任何四个以上的重复横线\ ``----`` 将会渲染为分割线，如下面的浅灰色线所示：

----

指令
==========

满足:\ ``..`` + ``directive type`` +\ ``::`` +\ ``directive block`` 形式的块都将尝试作为指令解析。

紧跟着指令名之后的内容为指令的 argument，
在指令后一行，添加缩进并以字段列表的形式输入的为指令的 options，
在 options 后空一行，并相对指令缩进一次的输入，是指令的 content::

    .. {{ 指令名 }}:: {{ argument }}
        :{{ field name }}: {{ field value }}

        {{ content }}


图像指令
----------

插入图像可以使用\ ``image`` 或\ ``figure`` 指令：

::

    .. image:: img/59498721_p0.jpg
        :height: 400px  #图像高度
        :width: 600px   #图像宽度
        :scale: 50%     #图像缩放，使用百分比
        :align: center  #设置图像对齐方式（top, middle, bottom, left, center, right）
                        #超链接，这会让图片可点击，点击后跳转到目标。
        :target: https://www.cqu.edu.cn

比如，下面是一个重庆大学的校徽，点击跳转到学校主页：

.. image:: img/cqu.png
    :height: 400px  
    :width: 400px   
    :scale: 50%     
    :align: center
    :target: https://www.cqu.edu.cn

具体见官方文档：`Image <https://docutils.sourceforge.io/docs/ref/rst/directives.html#image>`_
、`Figure <https://docutils.sourceforge.io/docs/ref/rst/directives.html#figure>`_

表格指令
----------

共有三种表格指令，包括
`table <https://docutils.sourceforge.io/docs/ref/rst/directives.html#table>`_ 、
`csv-table <https://docutils.sourceforge.io/docs/ref/rst/directives.html#csv-table>`_ 、
`list-table <https://docutils.sourceforge.io/docs/ref/rst/directives.html#list-table>`_ 。

比如，
::

    .. table:: Truth table for "not"
    :widths: auto

    =====  =====
      A    not A
    =====  =====
    False  True
    True   False
    =====  =====

它是这样的：

.. table:: Truth table for "not"
    :widths: auto

    =====  =====
        A    not A
    =====  =====
    False  True
    True   False
    =====  =====

再比如，
::

    .. csv-table:: Frozen Delights!
    :header: "Treat", "Quantity", "Description"
    :widths: 15, 10, 30

    "Albatross", 2.99, "On a stick!"
    "Crunchy Frog", 1.49, "If we took the bones out,
    it wouldn't be crunchy, now would it?"
    "Gannet Ripple", 1.99, "On a stick!"

它是这样的：

.. csv-table:: 
   :header: "Treat", "Quantity", "Description"
   :widths: 15, 10, 30

   "Albatross", 2.99, "On a stick!"
   "Crunchy Frog", 1.49, "If we took the bones out,
   it wouldn't be crunchy, now would it?"
   "Gannet Ripple", 1.99, "On a stick!"

还比如，
::

    .. list-table:: Frozen Delights!
    :widths: 15 10 30
    :header-rows: 1
    :align: center #这个居中是表格居中，不是元素居中！

    * - Treat
        - Quantity
        - Description
    * - Albatross
        - 2.99
        - On a stick!
    * - Crunchy Frog
        - 1.49
        - If we took the bones out, it wouldn't be
        crunchy, now would it?
    * - Gannet Ripple
        - 1.99
        - On a stick!

它是这样的：

.. list-table:: Frozen Delights!
   :widths: 15 10 30
   :header-rows: 1
   :align: center

   * - Treat
     - Quantity
     - Description
   * - Albatross
     - 2.99
     - On a stick!
   * - Crunchy Frog
     - 1.49
     - If we took the bones out, it wouldn't be
       crunchy, now would it?
   * - Gannet Ripple
     - 1.99
     - On a stick!

具体参数可以参考上面的官方文档或者
`1.2.2. 表格 <https://learn-rst.readthedocs.io/zh-cn/latest/reST-入门.html#id17>`_ 文档。

目录指令
----------

`contents\ <https://docutils.sourceforge.io/docs/ref/rst/directives.html#table-of-contents>`_
指令可以渲染出该篇文档的目录。比如，

::

    .. contents:: 一个好听的
        标题名字
        :depth: 2

生成一个展示到第二级的目录：

.. contents:: 一个好听的
    标题名字
    :depth: 2

替换引用指令
--------------------

替换引用
`replace\ <https://docutils.sourceforge.io/docs/ref/rst/directives.html#replacement-text>`_
可以将一个指定的片段替换为另一个结构。比如，
::

    .. |reST| replace:: reStructuredText

则下文出现的所有\ ``|reST|``\ 将被替换为\ ``reStructuredText``\ 。


再比如替换和引用一起，
::

    I recommend you try |Python|_.

    .. |Python| replace:: Python, *the* best language around
    .. _Python: https://www.python.org/

将会得到：
I recommend you try |Python|_.

.. |Python| replace:: Python, *the* best language around
.. _Python: https://www.python.org/

日期时间指令
--------------------
将会渲染为编译文档时的时间日期，
可以用 Python 标准库 time 中
`strftime()\ <https://docs.python.org/3/library/time.html#time.strftime>`_
相同的格式化字符串设置渲染格式。
::

    .. |date| date::
    .. |time| date:: %H:%M

    Today's date is |date|.

    This document was generated on |date| at |time|.

将会得到：

.. |date| date::

.. |time| date:: %H:%M

Today's date is |date|.

This document was generated on |date| at |time|.

提示或声明指令
--------------------

包括"attention", "caution", "danger", "error", "hint", "important", "note", "tip", "warning"。比如，

::

    .. DANGER::
        我是危险⚠️

.. DANGER::
    我是危险⚠️

::

    .. caution::
         我是小心！

.. caution::
    我是小心！

::

    .. hint::
         我是提示！

.. hint::
    我是提示！

::

    .. attention::
        我是注意

.. attention::
    我是注意

::

    .. note::
        我是备注

.. note::
    我是备注

::

    .. error::
        我是错误

.. error::
    我是错误

当然，我们可以直接使用通用提示指令
`admonition\ <https://docutils.sourceforge.io/docs/ref/rst/directives.html#generic-admonition>`_：

::

    .. admonition:: 我是标题

        You can make up your own admonition too.

它长这个样子：

.. admonition:: 我是标题

    You can make up your own admonition too.

更多指令
--------------------
敬请访问：
 - `reStructuredText Directives\ <https://docutils.sourceforge.io/docs/ref/rst/directives.html#>`_
 - `1.2. 常用指令\ <https://learn-rst.readthedocs.io/zh-cn/latest/reST-入门.html#id36>`_
 - `中级语法\ <https://rst-tutorial.readthedocs.io/zh/latest/advance/index.html#>`_